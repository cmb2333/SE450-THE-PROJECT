@import json
@import datetime
@import todo_manager

<@
def valid_date_format(date_str):
    try:
        datetime.datetime.strptime(date_str, "%Y-%m-%d")
        return True
    except ValueError:
        return False

def check_task_list_consistency(manager):
    task_ids = [task.task_id for task in manager.tasks]
    return len(task_ids) == len(set(task_ids))
@>

# Logging
log: POST 1 <todo_manager.TodoManager>.tasks

# Pools
pool: <todo_manager.TodoManager> 1 OPAQUE
pool: <string> 5
pool: <int> 5

# Properties
property: check_task_list_consistency(<todo_manager.TodoManager>)

# Initialize TodoManager
<todo_manager.TodoManager> := todo_manager.TodoManager(filename="test_tasks.json")

# Generate strings for task names
<string> := ""
<string> += <["Task_A", "Task_B", "Task_C", "Task_D", "Task_E"]>

# Generate integers for task IDs
<int> := <[1..100]>

# Add a task
~<todo_manager.TodoManager>.add_task(name=<string>, due_date="2024-12-31", priority="Medium", category="Test") => \
    len(<todo_manager.TodoManager>.tasks) == pre<(len(<todo_manager.TodoManager>.tasks))> + 1

# Update a task
len(<todo_manager.TodoManager>.tasks) > 0 -> \
~<todo_manager.TodoManager>.update_task(task_id=1, name="Updated Task") => \
    any(task.name == "Updated Task" for task in <todo_manager.TodoManager>.tasks)

# Delete a task
len(<todo_manager.TodoManager>.tasks) > 0 -> \
~<todo_manager.TodoManager>.delete_task(task_id=1) => \
    len(<todo_manager.TodoManager>.tasks) == pre<(len(<todo_manager.TodoManager>.tasks))> - 1

# List tasks
len(<todo_manager.TodoManager>.tasks) > 0 -> \
<todo_manager.TodoManager>.list_tasks()

# Mark all tasks as completed
len(<todo_manager.TodoManager>.tasks) > 0 -> \
~<todo_manager.TodoManager>.mark_all_completed() => \
    all(task.completed for task in <todo_manager.TodoManager>.tasks)

# Archive completed tasks
len(<todo_manager.TodoManager>.tasks) > 0 and \
any(task.completed for task in <todo_manager.TodoManager>.tasks) -> \
~<todo_manager.TodoManager>.archive_completed_tasks() => \
    all(not task.completed for task in <todo_manager.TodoManager>.tasks)

# Export tasks to CSV
<todo_manager.TodoManager>.export_tasks_to_csv(filename="test_tasks.csv")

# Undo last action
len(<todo_manager.TodoManager>.history) > 0 -> \
~<todo_manager.TodoManager>.undo_last_action() => \
    len(<todo_manager.TodoManager>.history) == pre<(len(<todo_manager.TodoManager>.history))> - 1
